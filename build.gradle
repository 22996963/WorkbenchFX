group 'com.dlsc'

task wrapper(type: Wrapper) {
    description = 'Generates gradlew[.bat] scripts'
    gradleVersion = '4.6'
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
    }
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jcenter.bintray.com' }

    }
    dependencies {
        classpath 'org.jruby:jruby-complete:9.1.16.0'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.6'
        classpath 'org.asciidoctor:asciidoctorj-diagram:1.5.4.1'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'de.jensd:fontawesomefx-commons:9.1.2'
        classpath 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
        classpath 'com.jfoenix:jfoenix:1.4.0'
        classpath 'org.slf4j:slf4j-api:1.8.0-beta0'
        classpath 'org.slf4j:slf4j-jdk14:1.8.0-beta0'
    }
}

ext.checkstyleVersion = '8.8'
ext.junitVintageVersion  = '5.1.0'
ext.junitPlatformVersion = '1.1.0'
ext.junitJupiterVersion  = '5.1.0'
ext.log4jVersion  = '2.11.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'checkstyle'

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

jar {
    baseName = 'workbenchfx'
    version = '0.0.1-SNAPSHOT'
}

compileTestJava {
    sourceCompatibility = 9
    targetCompatibility = 9
    options.compilerArgs += '-parameters'
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])

    // Mockito
    testCompile("org.mockito:mockito-core:2.16.0")

    // Guava
    compile 'com.google.guava:guava:24.0-jre'

    // ControlsFX
    compile 'org.controlsfx:controlsfx:9.0.0'

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // To use Log4J's LogManager
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-api:${log4jVersion}")

    // FontAwesomeFX
    compile 'de.jensd:fontawesomefx-commons:9.1.2'
    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
}

asciidoctorj {
    version = '1.5.6'
}

asciidoctor {
    requires = ['asciidoctor-diagram']

    sourceDir = file('docs')
    outputDir = file('build/docs')

    backends = ['html5', 'pdf']

    attributes 'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            toc: 'left',
            icons: 'font',
            linkattrs: true,
            encoding: 'utf-8'
}

task('pdf', type: org.asciidoctor.gradle.AsciidoctorTask) {
    configure asciidoctor
    backends = ['pdf']
}

task copyAdocHtml (type: Copy) {
    from "docs/include"
    into "build/docs/html5"
}

task copyAdocPdf (type: Copy) {
    from "docs/include"
    into "build/docs/pdf"
}

task html (type: org.asciidoctor.gradle.AsciidoctorTask) {
    configure asciidoctor
    backends = ['html5']
}

html.dependsOn copyAdocHtml
html.dependsOn copyAdocPdf

checkstyle {
    toolVersion = "${checkstyleVersion}"
}

junitPlatform {
    // platformVersion '1.1.0'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // configurationParameter 'junit.jupiter.conditions.deactivate', '*'
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}
